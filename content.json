{"meta":{"title":"刘正的技术博客","subtitle":"胆小认生，不易相处","description":"擅长Android技能,深入研究移动端开发,此为博客一枚。","author":"moment","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"仿开眼视频Android客户端","slug":"Eyepetizer","date":"2018-02-12T04:35:49.000Z","updated":"2018-02-12T04:35:49.000Z","comments":true,"path":"2018/02/12/Eyepetizer/","link":"","permalink":"http://yoursite.com/2018/02/12/Eyepetizer/","excerpt":"","text":"仿开眼视频Android客户端，本项目主要用来练手Google-MVP已及kotlin,对于急切想熟悉kotlin的童鞋来说是一个不错的练手项目，由于公司任务比较紧急所以本项目目前处于功能完善中，相关技术文章还未整理发布，想参与本项目开发的童鞋可以先自己去熟悉项目并在issues留言，或在目前的基础上进行修改，后续会陆续相关文章会发布到个人主页，欢迎各位积极PR,相关文章发布地址如下： 简书掘金blog源码地址 技术栈googleMvp SlidingTabLayout rxandroid RxRelay RecyclerViewSnap SmartRefreshLayout 1注：技术栈中的相关框架后期会进行源码解析，在原有框架基础上进行功能拓展 首页 关注 搜索 通知 我的 thanks本项目所有API均来自开眼视频，数据接口均属于非正常渠道获取，请勿用于商业用途，原公司拥有数据所有权，侵权删. 链接：开眼视频官网 Demo下载网页下载：下载地址 二维码下载：","categories":[],"tags":[]},{"title":"MVP模式解析","slug":"Mvp模式解析","date":"2018-01-29T09:59:23.000Z","updated":"2018-01-29T09:59:23.000Z","comments":true,"path":"2018/01/29/Mvp模式解析/","link":"","permalink":"http://yoursite.com/2018/01/29/Mvp模式解析/","excerpt":"","text":"前言： MVP模式是从MVVM 模式转化而来，MVVM是Model-View-ViewModel的简写,而MVP则是Model-View-Presenter 模式，其中Model负责 下面列举两种的差别： 1、MVC MVC 模式是model view 和 controller 三者之间可以互相通信，但是这样就存在一个问题，就是view层可以调用model层和controller层的代码，所以会导致逻辑混乱。 2、MVPMVP 是Model view 和 Presenter 组成，MVP最大的好处就是剥离了Presenter层出来替换掉了Controller，从而使得model 层和view层不能直接进行通信，必须通过presenter层间接进行通信，一般来说一个Activity只有一个presenter层来控制逻辑，但是在复杂的Activity中可以通过绑定多个Presenter来实现复杂的逻辑。 下面为大家展示下我已经封装好的逻辑代码： model : //basemodel 与数据请求相关的接口 public class BaseModel { public interface Classify { void getCookClassify(CallBack callBack); } } //MainModel 实现BaseModel.Classify中的接口进行数据请求 public class MainModel implements BaseModel.Classify { @Override public void getCookClassify(CallBack callBack) { // 数据请求 GetDataList.getCookClassify(callBack); } } view: //baseActivity 源码： public abstract class BaseActivity extends AppCompatActivity { //Presenter 实例 protected T presenter; @Override protected void onCreate(Bundle savedInstanceState) { beforeOnCreate(); super.onCreate(savedInstanceState); setContentView(getLayoutId()); initViews(); initdata(); } protected abstract int getLayoutId(); protected abstract void initViews(); protected abstract void initdata(); protected void beforeOnCreate(){ } @Override protected void onResume() { super.onResume(); afterOnResume(); } protected void afterOnResume(){ } @Override protected void onDestroy() { super.onDestroy(); afterOnDestory(); } protected void afterOnDestory(){ } } //baseview 接口，用来刷新页面数据，可以根据需求添加不同的方法。 public interface BaseView { //显示加载框 void showDialog(); //加载成功 void onSuccess(T t); //加载失败 void onError(Throwable t); //取消加载框 void dismissDialog(); } presenter: public class MainPresenter { // 页面刷新接口 private BaseView baseView; // 数据调用model private BaseModel.Classify cookClassify; public MainPresenter init(BaseView baseView) { this.baseView = baseView; this.cookClassify = new MainModel(); return this; } public void getData() { baseView.showDialog(); cookClassify.getCookClassify(new CallBack() { @Override public void onCompleted() { baseView.dismissDialog(); } @Override public void onError(Throwable e) { baseView.dismissDialog(); baseView.onError(e); } @Override public void onNext(CookClassify cookClassify) { baseView.onSuccess(cookClassify); } }); } } 使用步骤： 在BaseModel 中新建model接口 例：public interface Classify { void getCookClassify(CallBack callBack); } 新建相应的Model实现接口里的方法并进行数据获取 例： public class MainModel implements BaseModel.Classify { @Override public void getCookClassify(CallBack callBack) { GetDataList.getCookClassify(callBack); }} 新建presenter 例： public class MainPresenter { private BaseView baseView; private BaseModel.Classify cookClassify; public MainPresenter init(BaseView baseView) { this.baseView = baseView; this.cookClassify = new MainModel(); return this; } public void getData() { baseView.showDialog(); cookClassify.getCookClassify(new CallBack() { @Override public void onCompleted() { baseView.dismissDialog(); } @Override public void onError(Throwable e) { baseView.dismissDialog(); baseView.onError(e); } @Override public void onNext(CookClassify cookClassify) { baseView.onSuccess(cookClassify); } }); }}继承BaseActivity并传入presenter数据类型 例：public class MainActivity extends BaseActivity&lt;.MainPresenter&gt; implements BaseView { @Overrideprotected void initdata() { // 实例化presenter presenter = new MainPresenter().init(this); presenter.getData(); } @Override public void showDialog() {//todo: 显示dialog } @Override public void onSuccess(CookClassify cookClassify) { //todo: 刷新页面数据 MyListAdapter adapter = getAdapter(); adapter.refreshDatas(cookClassify.getTngou()); } @Override public void onError(Throwable t) { //todo: 错误处理 Log.d(“debug”, “onError===&gt;” + t.getLocalizedMessage()); } @Override public void dismissDialog() { //todo: 取消dialog显示 }} 更多详情见github openobj: github : https://github.com/momentslz 更多内容请添加本人公众号：","categories":[],"tags":[]},{"title":"使用IntentService进行apk更新","slug":"apk更新","date":"2018-01-29T09:20:46.000Z","updated":"2018-01-29T09:59:23.000Z","comments":true,"path":"2018/01/29/apk更新/","link":"","permalink":"http://yoursite.com/2018/01/29/apk更新/","excerpt":"","text":"通常在使用service更新应用时最常出现的问题就是Notification进度的更新问题、service在什么时间关闭以及需要我们自己在Service中创建新的线程处理耗时操作，当然这种也是可以实现的但是会显得略微繁琐经过对比发现可以使用IntentService已经实现了对耗时操作的包装出来，我们只需要实现IntentService中的onHandleIntent方法就可以在其中进行耗时操作的处理，在处理下载问题时发现在使用intentservice时暂时没有发现可以优雅的进行进度回调的实现方法，所以我这边使用了本地广播的形式来进行进度刷新。 添加了当前状态判断，当应用处于前台状态时直接进行安装，当应用处于后台时弹出notification弹窗点击后安装，示例如下图： 先创建广播 1234567891011121314151617181920212223242526272829303132333435public static class MyBroadcastReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; switch (intent.getAction()) &#123; case ACTION_TYPE_PREPARE: if (downloadCallback != null) &#123; downloadCallback.onPrepare(); &#125; break; case ACTION_TYPE_PROGRESS: int progress = intent.getIntExtra(&quot;progress&quot;, 0);// Log.d(&quot;progress&quot;, &quot;|- &quot; + progress + &quot; -|&quot;); if (downloadCallback != null) &#123; downloadCallback.onProgress(progress); &#125; break; case ACTION_TYPE_COMPLETE: String file_path = intent.getStringExtra(&quot;file_path&quot;); if (!TextUtils.isEmpty(file_path)) &#123; File file = new File(file_path); if (file.exists()) &#123; if (downloadCallback != null) &#123; downloadCallback.onComplete(file); &#125; &#125; &#125; break; case ACTION_TYPE_FAIL: String error = intent.getStringExtra(&quot;error&quot;); if (downloadCallback != null) &#123; downloadCallback.onFail(error + &quot;&quot;); &#125; break; &#125; &#125; 然后在IntentService中初始化本地广播并发送信息 1234567891011121314151617181920@Override public void onCreate() &#123; super.onCreate(); mLocalBroadcastManager = LocalBroadcastManager.getInstance(this); &#125; // 在下载进度刷新的地方进行回调 private void progress(int progress) &#123; Intent intent = new Intent(FileDownloaderManager.ACTION_TYPE_PROGRESS); intent.putExtra(&quot;progress&quot;, progress); mLocalBroadcastManager.sendBroadcast(intent); &#125; private void downApk(String url) &#123; ..... ..... progress(progress); ..... ..... &#125; 在activity中使用 12345678910mLocalBroadcastManager = LocalBroadcastManager.getInstance(mContext);mBroadcastReceiver = new MyBroadcastReceiver();IntentFilter intentFilter = new IntentFilter();intentFilter.addAction(ACTION_TYPE_PREPARE);intentFilter.addAction(ACTION_TYPE_PROGRESS);intentFilter.addAction(ACTION_TYPE_COMPLETE);intentFilter.addAction(ACTION_TYPE_FAIL);mLocalBroadcastManager.registerReceiver(mBroadcastReceiver, intentFilter);// ondestory时调用mLocalBroadcastManager.unregisterReceiver(mBroadcastReceiver); 以上源码已进行封装，方便使用具体操作步骤如下：|- 初始化及注册回调 123456789101112131415//初始化文件下载管理类FileDownloaderManager.init(context)// 注册下载进度监听，并开启广播接收FileDownloaderManager.registerDownload(object : FileDownloaderManager.DownloadCallback &#123; override fun onComplete(file: File) = mainView.downloadSucc(file) override fun onFail(msg: String?) = Unit override fun onProgress(progress: Int) = mainView.onProgress(progress) override fun onPrepare() = Unit &#125;)//开始下载FileDownloaderManager.download(url) |- 在下载完成后进行资源重置 1FileDownloaderManager.unbinder() 源码地址：源码地址文档地址：文档地址","categories":[],"tags":[{"name":"BroadcastReceiver IntentService","slug":"BroadcastReceiver-IntentService","permalink":"http://yoursite.com/tags/BroadcastReceiver-IntentService/"}]},{"title":"日志记录框架","slug":"Android日志记录框架","date":"2018-01-29T02:20:46.000Z","updated":"2018-01-29T09:59:23.000Z","comments":true,"path":"2018/01/29/Android日志记录框架/","link":"","permalink":"http://yoursite.com/2018/01/29/Android日志记录框架/","excerpt":"","text":"日志记录框架版本 v1.0.0已完成：业务日志、通用日志、错误日志可以正常使用待完善：Action日志当前页面功能、本地存储的上传规则 框架功能简介 使用在需要使用的module的gradle中添加：1compile &apos;com.moment:logconverge:1.0.3-2&apos; 日志框架入口初始化(在Application的onCreate方法中初始化)：在Application中添加代理：12345678910111213141516171819202122232425262728293031323334LogApplicationProxy.getProxy().onCreate(this);LogApplicationProxy.getProxy().onTrimMemory(level);LogApplicationProxy.getProxy().onLowMemory();LogApplicationProxy.getProxy().onTerminate();LogApplicationProxy.getProxy().onConfigurationChanged(newConfig);初始化：LogConverge.Builder builder = new LogConverge .Builder() /** * 设置日志记录级别，日志级别分为(ACTION,EXCEPTION,ALL,NONE) * 通用日志和业务日志默认开启 */ .setLogLevel(LogConverge.ShowLevel.ALL) .setChannel(Constant.channel) /** * 设置日志解析格式 * JSON * Sting */ .setParseType(ParseType.JSON) /** * 设置日志打印方式 * LOGCAT * Toast */ .setPrintType(PrintType.LOGGCAT) /** * 设置日志持久化方式 * 文件 * 数据库 */ .setCacheType(CacheType.DATABASE); //日志框架初始化入口 LogConverge.init(builder, this); Action日志初始化在Fragment(需要日志记录的页面，一般为BaseFragment)中添加代理:123LogProxy.create().onFragmentHiddenChanged(hidden, this.javaClass.simpleName)LogProxy.create().onFragmentResume()LogProxy.create().onFragmentPause() 业务日志使用方法123Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();map.put(&quot;业务名称&quot;, &quot;业务数据&quot;)LogConverge.create().log(map) 框架详情解析业务日志(BusinessLog) 根据业务需求添日志记录.数据结构：Map调用方法：LogConverge.log(Map logs)1234567&#123; &quot;businessLog&quot;: &#123; &quot;name&quot;: &quot;moment&quot;, &quot;gender&quot;: &quot;male&quot;, &quot;age&quot;: 17 &#125;&#125; 通用日志(CommonLog) 框架自动记录，日志字段分别为：设备厂商(devicebrand)系统版本号(sysversion)设备唯一标识(uuid)应用版本(appversion)应用渠道(channel)最大分配内存(memorysize)12345678&#123; &quot;appversion&quot;: &quot;1.0.0&quot;, &quot;channel&quot;: &quot;xiaomi&quot;, &quot;deviceBrand&quot;: &quot;Xiaomi&quot;, &quot;memorysize&quot;: &quot;256M&quot;, &quot;sysversion&quot;: &quot;7.1.1&quot;, &quot;uuid&quot;: &quot;XXXX-XXXX-XXX-XXX-XXXXXXXX&quot;&#125; 错误日志(ExceptionLog) 错误日志分为客户端异常和网络异常客户端异常由框架自动记录网络异常需用户调用方法LogConverge.logNetError(String log)方法实现12345&#123; &quot;error&quot;: &#123; &quot;clientError&quot;: &quot;Attempt to invoke a virtual method on a null object reference case:java.lang.NullPointerException: Attempt to invoke a virtual method on a null object reference&quot; &#125;&#125; ACTION日志(ActionLog)12345678910111213框架自动记录，日志字段分别为：当前页面(currentPage)上一页面(previousPage)进入时间(enterTime)退出时间(exitTime)前一页面停留时间(spendTime)&#123; &quot;currentPage&quot;: &quot;TestActivity&quot;, &quot;enterTime&quot;: 1516076541468, &quot;exitTime&quot;: 1516076630131, &quot;previousPage&quot;: &quot;MainActivity_MainFragment&quot;, &quot;spendTime&quot;: &quot;0h1m28s&quot;&#125; 新加apk下载管理类 示例： |- 在Manifest中进行Service注册 1&lt;service android:name=&quot;com.moment.logconverge.download.DownloadService&quot; /&gt; |- 注册fileProvider 123456789&lt;provider android:name=&quot;android.support.v4.content.FileProvider&quot; android:authorities=&quot;$&#123;applicationId&#125;.provider&quot; android:exported=&quot;false&quot; android:grantUriPermissions=&quot;true&quot;&gt; &lt;meta-data android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot; android:resource=&quot;@xml/file_paths&quot; /&gt;&lt;/provider&gt; 在app-src-main-res目录下创建xml文件夹并添加file_paths.xml文件 123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;root-path name=&quot;root&quot; path=&quot;&quot; /&gt; &lt;files-path name=&quot;files&quot; path=&quot;&quot; /&gt; &lt;cache-path name=&quot;cache&quot; path=&quot;&quot; /&gt; &lt;external-path name=&quot;external&quot; path=&quot;&quot; /&gt; &lt;external-files-path name=&quot;external_file_path&quot; path=&quot;&quot; /&gt; &lt;external-cache-path name=&quot;external_cache_path&quot; path=&quot;&quot; /&gt;&lt;/paths&gt; |- 初始化及注册进度回调 12345678910111213//初始化文件下载管理类FileDownloaderManager.init(context)// 注册下载进度监听，并开启广播接收FileDownloaderManager.registerDownload(object : FileDownloaderManager.DownloadCallback &#123; override fun onComplete(file: File) = mainView.downloadSucc(file) override fun onFail(msg: String?) = Unit override fun onProgress(progress: Int) = mainView.onProgress(progress) override fun onPrepare() = Unit &#125;) |- 开启下载 1FileDownloaderManager.download(url) |- 在下载完成后进行资源重置 1FileDownloaderManager.unbinder() apk下载混淆添加123-dontwarn okhttp3.**-dontwarn okio.**-dontwarn javax.annotation.** 混淆如下 1234567891011-keep class com.moment.logconverge.entity.**&#123;*;&#125;-dontwarn com.moment.logconverge.entity.**-keep class org.litepal.** &#123; *;&#125;-keep class * extends org.litepal.crud.DataSupport &#123; *;&#125; ThanksJSON解析：fastjson数据库存储：litepal","categories":[],"tags":[{"name":"BroadcastReceiver IntentService","slug":"BroadcastReceiver-IntentService","permalink":"http://yoursite.com/tags/BroadcastReceiver-IntentService/"}]},{"title":"Handler、AsyncTask、HandlerThread和IntentService之间的对比","slug":"Android中处理耗时操作的几种方法","date":"2018-01-29T01:30:46.000Z","updated":"2018-02-23T06:58:00.684Z","comments":true,"path":"2018/01/29/Android中处理耗时操作的几种方法/","link":"","permalink":"http://yoursite.com/2018/01/29/Android中处理耗时操作的几种方法/","excerpt":"","text":"耗时操作的几种操作方式Thread Handler Looper MessageQueue创建handler时会创建looer对象并用looper中的messageQueue对象初始化当前messageQueue当使用handler发送消息时会有两种方式发送：sendMessage和dispatchMessage前者发送的消息会直接发送至messageQueue中通过looper对象循环处理并将结果转发至handler的handleMessage方法中经过了线程之间的切换后者则通过判断是否存在Runnable接口回调来选择返回信息的方式存在的话则直接调用Runnable中的run方法，若不存在则直接调用handler中的handMessage方法，在同一线程完成 在主线程使用在主线程创建handler对象并其修饰为static类型，覆写handleMessage方法对收到的message对象进行处理，从打印信息可以发现当前线程为main线程即主线程，其中的looper对象是在ActivityThread.main中创建的handler 使用示例: 123456789public static Handler handler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case 10001: Log.d(&quot;main&quot;, msg.obj + &quot;&quot; + Looper.myLooper().getThread().getName()); &#125; &#125; &#125;; thread使用: 123456789new Thread(new Runnable() &#123; @Override public void run() &#123; Message message = handler.obtainMessage(); message.what = 10001; message.obj = &quot;hello&quot;; handler.dispatchMessage(message); &#125; &#125;).start(); 在thread线程中使用handler对象时参考Lopper源码中的示例： 1234567891011121314151617181920212223private class LopperThread extends Thread &#123; private Handler mHandler; @Override public void run() &#123; super.run(); Looper.prepare(); mHandler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case 10001: Log.d(&quot;main&quot;, msg.obj + &quot;&quot; + Looper.myLooper().getThread().getName()); &#125; &#125; &#125;; Message message = mHandler.obtainMessage(); message.what = 10001; message.obj = &quot;hello&quot;; mHandler.sendMessage(message); Looper.loop(); &#125; &#125; 使用方法为： 12LopperThread thread = new LopperThread();thread.start(); AsyncTaskasynctask的创建： 12345678910111213141516171819202122232425262728293031public class MyTestTask extends AsyncTask&lt;Integer, Integer, String&gt; &#123; private static final String TAG = MyTestTask.class.getSimpleName(); @Override protected void onPreExecute() &#123; super.onPreExecute(); Log.i(TAG, &quot;onPreExecute-&gt;运行前,主线程)&quot; + Looper.myLooper().getThread().getName()); &#125; @Override protected void onPostExecute(String s) &#123; super.onPostExecute(s); Log.i(&quot;TAG&quot;, &quot;onPostExecute-&gt;运行后,主线程&quot; + Looper.myLooper().getThread().getName()); &#125; @Override protected void onProgressUpdate(Integer... values) &#123; super.onProgressUpdate(values); Log.i(&quot;TAG&quot;, &quot;onProgressUpdate-&gt;更新进度,主线程&quot; + Looper.myLooper().getThread().getName()); &#125; @Override protected String doInBackground(Integer... params) &#123; Log.i(TAG, &quot;doInBackground-&gt;运行中,子线程&quot;); for (int i = 0; i &lt; 10; i++) &#123; publishProgress(i); &#125; return &quot;finish&quot;; &#125;&#125; 其中三个泛型的参数分别为：Params(传入doInBackground方法中的参数)Progress(onProgressUpdate方法中更新进度的参数)Result(后台执行完成后的返回参数) 使用： 123for (int i = 0; i &lt; 128; i++) &#123; new MyTestTask().execute();&#125; 使用须知：AsyncTask3.0之前为并发执行最大并发数两位128(参见2.3.7源码MAXIMUM_POOL_SIZE = 128)，当并发数量大于128时会报异常3.0之后AsyncTask变为顺序执行，当上一个任务完成后才会执行下一个任务，顺序执行参考链接 HandlerThreadhandlerthread继承自Thread所以本来就是线程，只是在线程的run方法中添加了looper循环来实现耗时操作，在使用时先调用start方法开启线程然后通过mHandlerThread.getLooper()的方法获取handlerThread中的looper对象和新创建的hanlder对象进行绑定即通过以下方法初始化新建的handler： 123public Handler(Looper looper) &#123; this(looper, null, false);&#125; 在handler初始化后即和handlerthread完成绑定，需注意的是耗时操作需在新建的handler的handleMessage方法中进行 12345678910111213@Override public void run() &#123; mTid = Process.myTid(); Looper.prepare(); synchronized (this) &#123; mLooper = Looper.myLooper(); notifyAll(); &#125; Process.setThreadPriority(mPriority); onLooperPrepared(); Looper.loop(); mTid = -1; &#125; 通过Looper.prepare()和 Looper.loop()实现了looper循环使用方法： 12345678910111213141516初始化：HandlerThread mHandlerThread = new HandlerThread(&quot;myHandlerThread&quot;);mHandlerThread.start();Handler mHandler = new Handler(mHandlerThread.getLooper()) &#123; @Override public void handleMessage(Message msg) &#123; //耗时操作 do something.... Log.i(&quot;tag&quot;, &quot;message_obj：&quot; + msg.obj.toString()); &#125;&#125;;发送Message：Message msg = new Message();msg.obj = &quot;message_obj&quot;;mHandler.sendMessage(msg); 参考链接 IntentServiceIntentService在onCreate时使用HandlerService对ServiceHandler进行了绑定，在ServiceHandler的handleMessage方法中调用了抽象方法onHandleIntent进行耗时操作，所以在IntentService的onHandleIntent方法中可以进行耗时操作，在onHandleIntent调用后还调用了stopSelf方法结束自己，所以IntentService当执行完耗时操作后会自动销毁 代码示例： 1234567891011121314public class TestIntentService extends IntentService &#123; private static String TAG = &quot;IntentServiceLoad&quot;; public TestIntentService() &#123; super(TAG); &#125; @Override protected void onHandleIntent(Intent intent) &#123; //耗时操作 // TODO: 2018/1/25 do something... Log.d(TAG, &quot;onHandleIntent&quot;); &#125;&#125; 使用方法和service相同就不举例说明了，在应用中一般会用来下载文件","categories":[],"tags":[{"name":"handler LopperThread AsyncTask IntentService","slug":"handler-LopperThread-AsyncTask-IntentService","permalink":"http://yoursite.com/tags/handler-LopperThread-AsyncTask-IntentService/"}]},{"title":"自定义ActionBar","slug":"自定义ActionBar","date":"2016-06-05T01:30:46.000Z","updated":"2018-01-26T03:47:04.000Z","comments":true,"path":"2016/06/05/自定义ActionBar/","link":"","permalink":"http://yoursite.com/2016/06/05/自定义ActionBar/","excerpt":"","text":"前言： 相信大家都用过ActionBar吧，基本上都会去继承AppCompactActivity，但是在某些情况下，想实现一些特殊的效果的时候，系统自带的ActionBar就显得有点儿鸡肋了，不过后面又出了ToolBar控件，大大的弥补了ActionBar的不足，所以本次的自定义ActionBar就是继承的ToolBar，从而实现了ActionBar的高度以及可显示内容的高度定制。 下面列举几种自定义的样式： 1、自定义左侧返回菜单，使用方法见代码： private MyActionBar actionBar; actionBar = (MyActionBar) findViewById(R.id.myactionbar);actionBar.withTitle(“分类目录”) //设置title文字 .setABCallBack(this) // 设置左侧返回按钮，中间自定义菜单及右侧按钮点击事件 .isShowBack(false) //是否显示左侧返回菜单//效果见下图： 2、自定义ActionBar中间的view private MyActionBar actionBar; actionBar = (MyActionBar) findViewById(R.id.myactionbar); //自定义中间的view。 View view = getLayoutInflater().inflate(R.layout.actionbar_center, null); view.findViewById(R.id.btn_click).setOnClickListener(v -> Toast.makeText(getApplicationContext(), \"id:\" + ((Button) v.findViewById(R.id.btn_click)).getText(), Toast.LENGTH_SHORT).show()); actionBar.setABCallBack(this) // 设置左侧返回按钮，中间自定义菜单及右侧按钮点击事件 .isShowBack(false) //是否显示左侧返回菜单 .addCenterView(view); //添加自定义view 见图二TEST按钮 //效果见下图： 3、自定义右侧按钮点击事件 private MyActionBar actionBar; actionBar = (MyActionBar) findViewById(R.id.myactionbar); //右侧item adapter List menuEntities = new ArrayList(); menuEntities.add(new MyPopupWindow.MenuEntity(R.drawable.titlebar_back_press, \"name\")); menuEntities.add(new MyPopupWindow.MenuEntity(R.drawable.titlebar_back_press, \"name1\")); menuEntities.add(new MyPopupWindow.MenuEntity(R.drawable.titlebar_back_press, \"name2\")); actionBar.setABCallBack(this) // 设置左侧返回按钮，中间自定义菜单及右侧按钮点击事件 .isShowBack(false) //是否显示左侧返回菜单 .addMenuList(menuEntities) // 添加右侧按钮item .addCenterView(view); //添加自定义view //效果见下图： MyActionBar 源码： public class MyActionBar extends Toolbar { private int backColor; private int defaultColor; private TextView tvTitle; private ImageView ivBack, ivRight; private RelativeLayout llBackground; private AbCallBack abCallBack; private Context mContext; private LinearLayout llcontainer; private MyPopupWindow popupWindow; public MyActionBar(Context context) { super(context, null); } public MyActionBar(Context context, final AttributeSet attrs) { this(context, attrs, -1); } @TargetApi(Build.VERSION_CODES.M) public MyActionBar(Context context, @Nullable AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); this.mContext = context; defaultColor = context.getColor(R.color.colorPrimary); LayoutInflater.from(context).inflate(R.layout.actionbar, this, true); TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MyActionBar, 0, 0); backColor = typedArray.getColor(R.styleable.MyActionBar_myactionbar_background, defaultColor); llBackground = (RelativeLayout) findViewById(R.id.ll_background); llBackground.setBackgroundColor(backColor); llcontainer = (LinearLayout) findViewById(R.id.ll_container); tvTitle = (TextView) findViewById(R.id.tv_title); ivBack = (ImageView) findViewById(R.id.iv_back); ivRight = (ImageView) findViewById(R.id.iv_right); ivBack.setColorFilter(getResources().getColor(R.color.white)); ivBack.setOnClickListener(v -> abCallBack.onBackClick()); ivRight.setColorFilter(getResources().getColor(R.color.white)); ivRight.setOnClickListener(v -> popupWindow.show(this)); } public MyActionBar addCenterView(View view) { if (llcontainer != null) { llcontainer.removeAllViews(); llcontainer.addView(view); } return this; } public MyActionBar addCenterViewClickListener(View view) { abCallBack.onCenterViewClick(view); return this; } public MyActionBar setHomeIcon(int resId) { if (mContext != null) { Picasso.with(mContext) .load(resId) .error(R.drawable.titlebar_back_press) .into(ivBack); } return this; } public MyActionBar isShowBack(boolean isShow) { if (!isShow) { ivBack.setVisibility(INVISIBLE); } else { ivBack.setVisibility(VISIBLE); } return this; } public MyActionBar addMenuList(List menuEntityList) { popupWindow = new MyPopupWindow(mContext); popupWindow.addMenuList(menuEntityList) .addOnItemClickLisenter((parent, view, position, id) -> { abCallBack.onRightClick(position); popupWindow.dismiss(); }).build(); return this; } public MyActionBar setABCallBack(AbCallBack abCallBack) { this.abCallBack = abCallBack; return this; } public MyActionBar withTitle(String title) { tvTitle.setText(title); return this; } } AbCallBack （ActionBar点击事件回调）源码： public interface AbCallBack { void onBackClick(); void onRightClick(); } 更多使用方法详见github: github : https://github.com/momentslz/openobj 更多内容请添加本人公众号：","categories":[],"tags":[{"name":"toolbar actionbar","slug":"toolbar-actionbar","permalink":"http://yoursite.com/tags/toolbar-actionbar/"}]}]}